@page "/"
@using RickAndMorty.Shared.Data;
@using RickAndMorty.Web.Services;

<PageTitle>Rick And Morty</PageTitle>


<div style="margin-left:auto; margin-right:auto; width:50%; text-align:center; background-color:black;">
    <h1 style="color:mediumaquamarine">Welcome to this dimension</h1>

    <img style="margin-left:auto; margin-right:auto;width:25vw; display:inline-block;" src="https://r1.abcimg.es/resizer/resizer.php?imagen=https%3A%2F%2Fs3.abcstatics.com%2Fmedia%2Fseries%2F000%2F003%2F130%2Frick-y-morty-1.jpg&nuevoancho=690&medio=abc" />
</div>

<div style="margin-top:10px">
    <select class="form-select form-select-lg mb-3" aria-label=".form-select-lg example">
        <option selected>Select season</option>
        @if (seasons != null)
        {
            @foreach (var season in seasons!)
            {
                <option value="@season">Season @season</option>
            }
        } 
    </select>
</div>
<div>
    <table class="table">
        <thead class="table-dark">
            <tr>
                <th scope="col">#</th>
                <th scope="col">Name</th>
                <th scope="col">Air date</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (Episodes != null)
            {
                @foreach (var episode in Episodes!)
                {
                    <tr>
                        <th scope="row">@episode.id</th>
                        <td>@episode.name</td>
                        <td>@episode.air_date</td>
                        <td>
                            <a class="btn btn-info" href="/character/@episode.id">Characters</a>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    Loading ...
                </tr>
            }
        </tbody>
    </table>

</div>

@*<SurveyPrompt Title="How is Blazor working for you?" />*@

@code
{
    public List<ApiEpisode>? Episodes  { get; set; }

    public List<ApiCharacters>? Character { get; set; }

    public List<string>? seasons { get; set; }

    int totalPages = 0;

    protected override async Task OnInitializedAsync()
    {
        ConsumeAPI consumeAPI = new ConsumeAPI();

        List<GeneralResponse<ApiEpisode>> GeneralResponse = new List<GeneralResponse<ApiEpisode>>();

        GeneralResponse = await consumeAPI.GetListDataAsync<GeneralResponse<ApiEpisode>>("episode");
        Episodes = new List<ApiEpisode>();

        totalPages = GeneralResponse[0].info!.pages;

        Episodes!.AddRange(GeneralResponse[0].results!);

        if (totalPages > 1)
        {
            for (int i = 2; i <= totalPages; i++)
            {
                List<ApiEpisode> tempListEpisode = new List<ApiEpisode>();
                var episodesResponse = await consumeAPI.GetListDataAsync<GeneralResponse<ApiEpisode>>($"episode?page={i}");
                tempListEpisode = episodesResponse[0].results!;

                Episodes!.AddRange(tempListEpisode);
            }
        }
        List<string> seasonEpisodes = new List<string>();

        foreach (var item in Episodes)
        {
            seasonEpisodes.Add(item.episode!.Substring(1, 2));
        }

        seasons = seasonEpisodes.Distinct().ToList();
    }
}