@page "/"
@using RickAndMorty.Shared.Data;
@using RickAndMorty.Web.Services;

<PageTitle>Rick And Morty</PageTitle>


<div style="margin-left:auto; margin-right:auto; width:50%; text-align:center; background-color:black;">
    <h1 style="color:mediumaquamarine">Welcome to this dimension</h1>

    <img style="margin-left:auto; margin-right:auto;width:25vw; display:inline-block;" src="https://r1.abcimg.es/resizer/resizer.php?imagen=https%3A%2F%2Fs3.abcstatics.com%2Fmedia%2Fseries%2F000%2F003%2F130%2Frick-y-morty-1.jpg&nuevoancho=690&medio=abc" />
</div>

<div style="margin-top:10px">
    <select class="form-select form-select-lg mb-3" aria-label=".form-select-lg example">
        <option selected>Select season</option>
        @for (int i = 1; i < 6; i++)
        {
            <option value="@i">Season @i</option>
        }
    </select>
</div>
<div>
    <table class="table">
        <thead class="table-dark">
            <tr>
                <th scope="col">#</th>
                <th scope="col">Name</th>
                <th scope="col">Air date</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (Episodes != null)
            {
                @foreach (var episode in Episodes!)
                {
                    <tr>
                        <th scope="row">@episode.Id</th>
                        <td>@episode.Name</td>
                        <td>@episode.Air_date</td>
                        <td>
                            <a class="btn btn-info" href="/character">Characters</a>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    Loading ...
                </tr>
            }
        </tbody>
    </table>

</div>

@*<SurveyPrompt Title="How is Blazor working for you?" />*@

@code
{
    public List<ApiEpisode>? Episodes  { get; set; }

    public List<Characters>? Character { get; set; }

    int totalPages = 0;

    protected override async Task OnInitializedAsync()
    {
        ConsumeAPI consumeAPI = new ConsumeAPI();

        totalPages = await consumeAPI.GetTotalPagesAsync("episode");
        Episodes = new List<ApiEpisode>();
        if (totalPages >= 1)
        {
            for (int i = 1; i <= totalPages; i++)
            {
                Episodes!.AddRange(await consumeAPI.GetDataAsync<ApiEpisode>($"episode?page={i}"));
            }
        }
        List<string> seasonEpisodes = new List<string>();

        foreach (var item in Episodes)
        {
            seasonEpisodes.Add(item.Episode!);
        }

        var reso = seasonEpisodes.GroupBy(x => x).Select(y => y.First());
        //var seasons = seasonEpisodes.Select(x => x).Distinct();
        //var reso = seasonEpisodes.Distinct().ToList();

       
        // foreach (var item in reso)
        // {
        //     var resu = item.First();
        // }
        var t = 0;
        //  foreach (var episode in Episodes!)
       // {
       //     foreach (var character in episode.ListCharacters!)
       //     {
       //         //Character episodeCharacter = new Character();
       //          Character = await consumeAPI.GetDataAsync<Characters>(character);

       //      }

       // }

       //  Character = await consumeAPI.GetDataAsync<Characters>("character");
    }
}