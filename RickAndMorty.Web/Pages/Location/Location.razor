@page "/Location/{LocationId:int}"
@using RickAndMorty.Shared.Data;
@using RickAndMorty.Web.Services;

<style>
    section{
        display: flex;
        width: 600px;
        height: 430px;
    }
    
    section div{
        margin: 0 0 0 5px;
    }

    section div img{
        width: 150px;
        flex-grow: 1;
        object-fit: cover;
        opacity: .8;
        transition: .5s ease;
    }

    section div img:hover {
            cursor: crosshair;
        width: 300px;
        opacity: 1;
        filter: contrast(120%);
    }

</style>

@if (@thisLocation == null)
{
    <h1>Loading...</h1>
}
else
{
    <h1>@thisLocation.name</h1>
    <h3>
        @thisLocation.dimension
    </h3>

    <h3>
        Type: @thisLocation.type

    </h3>

    <br />

    <h5>Residents</h5>

    <section>

        @if (ListCharacters != null)
        {
            @foreach (var resi in ListCharacters!)
            {
                <div>
                    <img class="sectionImages" src="@resi.image" />
                    <br />
                    <a>@resi.name</a>
                </div>
            }
        }

        
    </section>


   <h2>They born here</h2>

    <section>

        @if (ListOriginCharacters != null)
        {
            @foreach (var natives in ListOriginCharacters!)
            {
                <div>
                    <img class="sectionImages" src="@natives.image" />
                    <br />
                    <a>@natives.name</a>
                </div>
            }
        }

    </section>
}



@code {
    [Parameter]
    public int LocationId { get; set; }

    public ApiLocation? thisLocation { get; set; }

    public List<ApiCharacters>? ListCharacters { get; set; }

    public List<ApiCharacters>? ListOriginCharacters { get; set; }

    ApiCharacters oneCharacter = new ApiCharacters();

    int totalPages = 0;

    protected override async Task OnInitializedAsync()
    {
        thisLocation = await consumeAPI.GetIndividualDataAsync<ApiLocation>($"location/{LocationId}");

        string CharacterIds = string.Empty;

        if (thisLocation.residents!.Count < 1)
        {
            ListCharacters = new List<ApiCharacters>{(
                new ApiCharacters(){ name = "Nobody lives here...", image ="https://images.ctfassets.net/cnu0m8re1exe/6Pi7OP1AvToHhygPXUh0Ej/b299c81fa674311d271e4c19d96f7027/dino_skull.jpg?fm=jpg&fl=progressive&w=660&h=433&fit=fill"}
            ) };
        }
        else
        {
            foreach (var resi in thisLocation.residents!)
            {
                int loc = resi.IndexOf("er/") + 3;
                CharacterIds = CharacterIds + resi.Substring(loc, (resi.Length - loc)) + ",";

            }

            CharacterIds = CharacterIds.Substring(0, CharacterIds.Length - 1);


            if (!CharacterIds.Contains(","))
            {

                oneCharacter = await consumeAPI.GetIndividualDataAsync<ApiCharacters>($"character/{CharacterIds}");
                ListCharacters = new List<ApiCharacters>();
                ListCharacters!.Add(oneCharacter);
            }
            else
            {
                ListCharacters = await consumeAPI.GetListByEntity<ApiCharacters>($"character/{CharacterIds}");
            }
        }
        GeneralResponse<ApiCharacters> GeneralResponse = new GeneralResponse<ApiCharacters>();

        GeneralResponse = await consumeAPI.GetListDataAsync<ApiCharacters>("character");
        ListOriginCharacters = new List<ApiCharacters>();

        totalPages = GeneralResponse.info!.pages;

        ListOriginCharacters!.AddRange(GeneralResponse.results!);

        if (totalPages > 1)
        {
            for (int i = 2; i <= totalPages; i++)
            {
                var characterOriginResponse = await consumeAPI.GetListDataAsync<ApiCharacters>($"character?page={i}");
                ListOriginCharacters!.AddRange(characterOriginResponse.results!);

            }
            ListOriginCharacters = ListOriginCharacters.Select(x => x).Where(y => y.origin?.url == $"https://rickandmortyapi.com/api/location/{LocationId}").ToList();
        }
    }

}